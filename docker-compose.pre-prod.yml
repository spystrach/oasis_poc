# Docker-compose d'OASIS en pré-production

services:

  # le serveur web django
  django:
    image: ghcr.io/spystrach/oasis_poc-django:local
    build:
      dockerfile: ./Dockerfile.pre-prod
      context: ./django
    command: gunicorn oasis.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - oasis_preprod_static:/usr/src/app/staticfiles
      - oasis_preprod_tempo:/usr/src/app/tempo
    expose:
      - "8000"
    env_file:
      - ./env/stack.pre-prod.env
    depends_on:
      - postgres
      - celery

  # la base de donnée
  postgres:
    image: ghcr.io/spystrach/oasis_poc-postgres:local
    build:
      dockerfile: ./Dockerfile
      context: ./postgres
    volumes:
      - oasis_preprod_postgres:/var/lib/postgresql/data
    env_file:
      - ./env/stack.pre-prod.env

  # le serveur web de reverse proxy
  nginx:
    image: ghcr.io/spystrach/oasis_poc-nginx:local
    build:
      dockerfile: ./Dockerfile
      context: ./nginx
    volumes:
      - oasis_preprod_static:/home/app/staticfiles
    ports:
      - "80:80"
    depends_on:
      - django

  # le cache key=value
  redis:
    image: ghcr.io/spystrach/oasis_poc-redis:local
    build:
      dockerfile: ./Dockerfile
      context: ./redis
    command: /bin/sh -c "redis-server /default-redis.conf --requirepass $$REDIS_PASSWORD"
    volumes:
      - oasis_preprod_redis:/data
    env_file:
      - ./env/stack.pre-prod.env

  # la file de tâches
  celery:
    image: ghcr.io/spystrach/oasis_poc-celery:local
    build:
      dockerfile: ./Dockerfile.celery
      context: ./django
    command: celery --app oasis worker
    env_file:
      - ./env/stack.pre-prod.env
    depends_on:
      - redis

volumes:
  # le support de la base de donnée
  oasis_preprod_postgres:
  # le support du cache key=value
  oasis_preprod_redis:
  # les fichiers statiques du site
  oasis_preprod_static:
  # plateforme d'échange entre le conteneur et l'hôte
  oasis_preprod_tempo:
